This problem is about sequences of positive integers a1,a2,…,aN. A subsequence of a sequence is anything obtained by dropping some of the elements. For example, 3,7,11,3 is a subsequence of 6,3,11,5,7,4,3,11,5,3 , but 3,3,7 is not a subsequence of 6,3,11,5,7,4,3,11,5,3 .

A fully dividing sequence is a sequence a1,a2,…,aN where ai divides aj whenever i < j. For example, 3,15,60,720 is a fully dividing sequence.

Given a sequence of integers your aim is to find the length of the longest fully dividing subsequence of this sequence.

Consider the sequence 2,3,7,8,14,39,145,76,320

It has a fully dividing sequence of length 3, namely 2,8,320, but none of length 4 or greater.

Consider the sequence 2,11,16,12,36,60,71,17,29,144,288,129,432,993 .

It has two fully dividing subsequences of length 5,

2,11,16,12,36,60,71,17,29,144,288,129,432,993 and
2,11,16,12,36,60,71,17,29,144,288,129,432,993
and none of length 6 or greater.

Solution :

a=[]
n = int(input())
for i in range(n):
  ele = int(input())
  a.append(ele)
stored_best = [0 for i in range(n)]
stored_best[0] = 1
for i in range(1, len(a)):
  maxi = 1
  for j in range(0, i):
    if a[i] % a[j] == 0:
      maxi = max(maxi, 1+stored_best[j])
  stored_best[i] = maxi
        
print(max(stored_best))


